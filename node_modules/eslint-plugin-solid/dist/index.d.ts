declare const allRules: {
    "components-return-once": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noEarlyReturn" | "noConditionalReturn", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "event-handlers": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"naming" | "capitalization" | "make-handler" | "make-attr" | "detected-attr" | "spread-handler", [({
        ignoreCase?: boolean | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    imports: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"prefer-source", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "jsx-no-duplicate-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noDuplicateProps" | "noDuplicateClass" | "noDuplicateChildren", [({
        ignoreCase?: boolean | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "jsx-no-undef": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"undefined" | "customDirectiveUndefined" | "autoImport", [({
        allowGlobals?: boolean | undefined;
        autoImport?: boolean | undefined;
        typescriptEnabled?: boolean | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "jsx-no-script-url": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noJSURL", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "jsx-uses-vars": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<never, [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "no-destructure": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noDestructure", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "no-innerhtml": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"dangerous" | "conflict" | "notHtml" | "useInnerText" | "dangerouslySetInnerHTML", [({
        allowStatic?: boolean | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "no-react-specific-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"prefer" | "noUselessKey", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "no-unknown-namespaces": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"style" | "unknown" | "component" | "component-suggest", [{
        allowedNamespaces: [string, ...string[]];
    }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-classlist": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"preferClasslist", [({
        classnames?: [string, ...string[]] | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-for": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"preferFor" | "preferForOrIndex", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "prefer-show": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"preferShowAnd" | "preferShowTernary", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    reactivity: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noWrite" | "untrackedReactive" | "expectedFunctionGotExpression" | "badSignal" | "badUnnamedDerivedSignal" | "shouldDestructure" | "shouldAssign" | "noAsyncTrackedScope", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "self-closing-comp": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"selfClose" | "dontSelfClose", [({
        component?: "all" | "none" | undefined;
        html?: "void" | "all" | "none" | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "style-prop": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"kebabStyleProp" | "invalidStyleProp" | "numericStyleValue" | "stringStyle", [({
        styleProps?: [string, ...string[]] | undefined;
        allowString?: boolean | undefined;
    } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
export declare type AllRules = keyof typeof allRules;
declare const plugin: {
    rules: {
        "components-return-once": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noEarlyReturn" | "noConditionalReturn", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "event-handlers": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"naming" | "capitalization" | "make-handler" | "make-attr" | "detected-attr" | "spread-handler", [({
            ignoreCase?: boolean | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        imports: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"prefer-source", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "jsx-no-duplicate-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noDuplicateProps" | "noDuplicateClass" | "noDuplicateChildren", [({
            ignoreCase?: boolean | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "jsx-no-undef": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"undefined" | "customDirectiveUndefined" | "autoImport", [({
            allowGlobals?: boolean | undefined;
            autoImport?: boolean | undefined;
            typescriptEnabled?: boolean | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "jsx-no-script-url": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noJSURL", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "jsx-uses-vars": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<never, [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "no-destructure": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noDestructure", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "no-innerhtml": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"dangerous" | "conflict" | "notHtml" | "useInnerText" | "dangerouslySetInnerHTML", [({
            allowStatic?: boolean | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "no-react-specific-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"prefer" | "noUselessKey", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "no-unknown-namespaces": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"style" | "unknown" | "component" | "component-suggest", [{
            allowedNamespaces: [string, ...string[]];
        }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "prefer-classlist": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"preferClasslist", [({
            classnames?: [string, ...string[]] | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "prefer-for": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"preferFor" | "preferForOrIndex", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "prefer-show": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"preferShowAnd" | "preferShowTernary", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        reactivity: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"noWrite" | "untrackedReactive" | "expectedFunctionGotExpression" | "badSignal" | "badUnnamedDerivedSignal" | "shouldDestructure" | "shouldAssign" | "noAsyncTrackedScope", [], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "self-closing-comp": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"selfClose" | "dontSelfClose", [({
            component?: "all" | "none" | undefined;
            html?: "void" | "all" | "none" | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
        "style-prop": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<"kebabStyleProp" | "invalidStyleProp" | "numericStyleValue" | "stringStyle", [({
            styleProps?: [string, ...string[]] | undefined;
            allowString?: boolean | undefined;
        } | undefined)?], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    };
    configs: {
        recommended: {
            plugins: string[];
            env: {
                browser: boolean;
                es6: boolean;
            };
            parserOptions: {
                sourceType: string;
                ecmaFeatures: {
                    jsx: boolean;
                    impliedStrict: boolean;
                };
            };
            rules: {
                "solid/jsx-no-duplicate-props": number;
                "solid/jsx-no-undef": number;
                "solid/jsx-uses-vars": number;
                "solid/no-unknown-namespaces": number;
                "solid/no-innerhtml": number;
                "solid/jsx-no-script-url": number;
                "solid/components-return-once": number;
                "solid/no-destructure": number;
                "solid/prefer-for": number;
                "solid/reactivity": number;
                "solid/event-handlers": number;
                "solid/imports": number;
                "solid/style-prop": number;
                "solid/no-react-specific-props": number;
                "solid/prefer-classlist": number;
                "solid/self-closing-comp": number;
                "solid/prefer-show": number;
            };
        };
        typescript: {
            plugins: string[];
            env: {
                browser: boolean;
                es6: boolean;
            };
            rules: {
                "solid/jsx-no-duplicate-props": number;
                "solid/jsx-no-undef": (number | {
                    typescriptEnabled: boolean;
                })[];
                "solid/jsx-uses-vars": number;
                "solid/no-innerhtml": number;
                "solid/jsx-no-script-url": number;
                "solid/components-return-once": number;
                "solid/no-destructure": number;
                "solid/prefer-for": number;
                "solid/reactivity": number;
                "solid/event-handlers": number;
                "solid/imports": number;
                "solid/style-prop": number;
                "solid/no-react-specific-props": number;
                "solid/prefer-classlist": number;
                "solid/self-closing-comp": number;
                "solid/no-unknown-namespaces": number;
                "solid/prefer-show": number;
            };
        };
    };
};
export declare type Configs = keyof typeof plugin.configs;
export {};
